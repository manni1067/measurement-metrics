Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Component/s,Component/s,Due Date,Votes,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Reference),Attachment,Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Date of First Response),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Flags),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Machine Readable Info),Custom field (New-TLP-TLPName),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Severity),Custom field (Severity),Custom field (Source Control Link),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Test and Documentation Plan),Custom field (Testcase included),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
FilenameUtils.concat fails if second argument (fullFilenameToAdd) starts with '~' (tilde),IO-552,13107180,Bug,Open,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Critical,,,jtuemmer,jtuemmer,05/Oct/17 09:20,12/Oct/17 07:51,20/Jun/19 08:22,,2.2,2.5,Utilities,,,0,"{{FilenameUtils.concat(""c:/temp"", ""~abc.txt"") returns ""~abc.txt/"" instead of ""c:/temp/~abc.txt"".}}

As a result, the file would be created in the user's home directory instead of c:/temp.

(Note: I Had to replace all instances of double backslashes that would normally appear in the java code with forward slashes as the editor cannot handle backslashes properly.)

commons io 2.2. and 2.5 behave the same. 2.3 and 2.4 not tested.","Windows 7 64bit, JavaVM 1.8 32bit",,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-10-12 07:22:23.029,,,false,,,,,,,,,,,,,9223372036854775807,,,Thu Oct 12 07:51:34 UTC 2017,,,,,,0|i3kwof:,9223372036854775807,,,,,,,,,"12/Oct/17 07:22;kinow;FWIW, checked out the latest code, quickly tried the provided sample code, and successfully reproduced the issue.","12/Oct/17 07:51;kinow;Interesting. I didn't know, but looks like in Linux ~kinow is equivalent to /home/kinow, or to ~ if kinow is the currently logged-in user. My user is kinow, and trying `mkdir ~kinow` fails with directory already exists. But a random `mkdir ~jj` works. But so does `touch ~123`. Which means you can have a file or directory that starts with ~.

The [getPrefixLength() method|https://github.com/apache/commons-io/blob/43720d02405e0b96939b331c1be7812fe5fec877/src/main/java/org/apache/commons/io/FilenameUtils.java#L651] seems to assume that a file like ~kinow is going to be a directory. Thus moving the prefix to the last character + 1. 

When that happens, the [doNormalize()|https://github.com/apache/commons-io/blob/43720d02405e0b96939b331c1be7812fe5fec877/src/main/java/org/apache/commons/io/FilenameUtils.java#L348] simply appends the / to the end of the file name.

Altering the getPrefixLength() method to return 0 instead of the length+1 for the case in question, results in ""c:/temp/~abc.txt"", which I believe is the intended output.

However, this change also breaks 7 tests.

{noformat}
Results :

Failed tests: 
  FilenameUtilsTestCase.testConcat:474 expected:<[~user/]> but was:<[a/b/~user]>
  FilenameUtilsTestCase.testGetFullPath:744 expected:<[~user/]> but was:<[]>
  FilenameUtilsTestCase.testGetFullPathNoEndSeparator:779 expected:<[~user]> but was:<[]>
  FilenameUtilsTestCase.testGetPrefix:603 expected:<[~user/]> but was:<[]>
  FilenameUtilsTestCase.testGetPrefixLength:535 expected:<6> but was:<0>
  FilenameUtilsTestCase.testNormalize:192 expected:<~user[/]> but was:<~user[]>
  FilenameUtilsTestCase.testNormalizeNoEndSeparator:368 expected:<~user[/]> but was:<~user[]>

Tests run: 1318, Failures: 7, Errors: 0, Skipped: 4
{noformat}

Not sure how to fix it now. Might need to think about it some more. But would be easier if someone else chimed in to add a second opinion or alternatives. At work I am using FilenameUtils for parsing some file names in RESTful URL's. So might get some extra time to work on it if it impact us.

",,,,,,,,,,,
Symbolic links get followed in deleteQuietly,IO-522,13020514,Bug,Open,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Critical,,stain,dtemme,dtemme,14/Nov/16 14:36,29/Sep/17 09:00,20/Jun/19 08:22,,2.5,,Utilities,,,0,"IO-168 describes the problem. 

`deleteQuietly` will behave correctly for nested symlinks but the initial call erroneously calls `cleanDirectory`. Calling `deleteDirectory` and returning would probably be the better behaviour (analogous to `forceDelete`)",,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,9223372036854775807,,,2016-11-14 14:36:14.0,,,,,,0|i36aj3:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,
Should FileUtils.copyFile be flushed and synced before comparing file sizes?,IO-544,13084921,Bug,Open,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Major,,,seanpltr,seanpltr,05/Jul/17 18:22,11/Dec/17 11:31,20/Jun/19 08:22,,2.5,,Utilities,,,0,"I've been struggling to troubleshoot intermittent {{IOExceptions}} thrown from {{FileUtils.doCopyFile}} when copying 2-4KB files from a local temporary file to a network drive. Despite the error, the file appears on the network drive when I check. Should the output channel/buffer be forced/flushed before closing, and synchronized before comparing the file lengths? It's a rather intermittent issue on a relatively high throughput PC so I'd expect there to be more IO latency than normal.

I found myself referencing:
* [The source code for FileUtils v2.5|https://commons.apache.org/proper/commons-io/javadocs/api-2.5/src-html/org/apache/commons/io/FileUtils.html]
* [FileChannel#force(boolean)|https://docs.oracle.com/javase/8/docs/api/java/nio/channels/FileChannel.html#force-boolean-]
* [IO-443 - FileUtils.copyFile methods throw an unnecessary ""Failed to copy full contents from"" exception|https://issues.apache.org/jira/browse/IO-443]

Thanks,
Sean","Win Server 2008, x86",,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-07-05 20:48:12.305,,,false,,,,,,,,,,,,,9223372036854775807,,,Fri Jul 07 21:22:10 UTC 2017,,,,,,0|i3h57j:,9223372036854775807,,,,,,,,,"05/Jul/17 20:48;b.eckenfels;Do you see the errors between different clients (i.e. Machine1 writes and sends message to Machine2 which cannot read) or on the same client. Because the later seems to be a Cache bug the former might be depending on the filesystem. Flush should not help here, if directly followed by a close(). An sync() might be a optional thing (in that case flush first). However most network filesystems have a close-to-commit semantic. What FS Server/type is this?","05/Jul/17 22:16;seanpltr;Thanks for the prompt reply Bernd.

The errors are between different clients, and only intermittently.
We have Machine1 copying to Machine2, which raises an IOException where the destination file length is always 0.
Machine1 is running Windows Server 2008, and is writing to a network drive on a PC running Windows Server 2012 R2. The destination is an NTFS drive, and I'm told that the shadow copies feature is enabled for backup.",05/Jul/17 22:36;b.eckenfels;You mean the server runs a directory scanning application which is not triggered after the commit but it starts to read as soon as it sees the file? In that case the problem is expected - you typically use a tempfilename/rename to have a atomic handoff. Sync would not really help here.,"05/Jul/17 23:50;seanpltr;I don't fully understand what you mean about a directory scanning application that is not triggered after the commit.

We're trying to have that copy a tempfile from Machine1 to a storage on a shared drive on Machine2. That's it. There are no other applications consuming or scanning the file *but* there is an antivirus suite running on Machine2. It's a straight forward file transfer as I see it. From what I can gather, the file transfer is OK but checking the destination file size returns 0. The disconnect between the result of destFile.length() and the successful copy is what makes me think it's not waiting for the OS to finish writing (somehow).",05/Jul/17 23:53;b.eckenfels;I guess what I am asking is Who is doing the check when and how. ,"06/Jul/17 00:01;seanpltr;Ah, sorry. The problem is with [line 1162 in FileUtils|https://commons.apache.org/proper/commons-io/javadocs/api-2.5/src-html/org/apache/commons/io/FileUtils.html#line.1130].","06/Jul/17 00:06;seanpltr;We have a scheduled task that runs every 4 hours. It logs locally in a tempfile.
When the work is done we copy the tempfile to the network drive using {{FileUtils.copyFile(local, remote, true);}}.

Let me know if there's anything else I can provide to help.","06/Jul/17 00:09;b.eckenfels;Ah ok, now I get it. I think I have seen this before and I do believe it is a SMB client bug. There are some directory caches and in a single client situation an unknown need for Cache invalidation. Maybe we can work around if by looping a limited time (but more often than currently). Related parameters: https://serverfault.com/questions/482174/slow-shared-folder-refresh-on-windows-7","06/Jul/17 00:35;b.eckenfels;Can you use Files.copy(Path,Path,...) from the standard JCL  instead? It uses the native copy function and has therefore not the problem with the not updated file metadata.","06/Jul/17 01:23;seanpltr;Wow, thanks Bernd! I'll pass the ServerFault article on to our server admin so we're aware of it.

Do you think it's worth follow-up about the SMB bug with Java? There's a closed [Java Bug about an incorrect File.length|http://bugs.java.com/bugdatabase/view_bug.do?bug_id=4290946] from 2003 that suggested getting the FileDescriptor and calling sync() could fix a similar issue, but result in serious performance degradation. 

As for Files.copy(), we'll give it a go and hopefully not have to worry about unexpected error notifications.","06/Jul/17 01:27;seanpltr;I'm good to mark this resolved.

We've got a paper trail if anyone else happens upon this edge case and the two workaround - polling to update the stale cache or the [java.nio.file.*Files.copy(Path, Path, ...)*|https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html].
",06/Jul/17 02:29;b.eckenfels;Let us know if the Files version helped. I do wonder if the commons code could be improved. For example by removing the comparison and making the loop a bit different.,"07/Jul/17 21:22;seanpltr;Well, your hunch was right Bernd and I'm confused. Instead of a 0 length file, Files.copy is reporting that the destination file is in use:

{{java.nio.file.FileSystemException: C:\...\file -> \\Machine2\...\file: The process cannot access the file because it is being used by another process.}}"
The problem of log acquisition,IO-526,13032142,Bug,Open,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Major,,,zhanghua09,zhanghua09,05/Jan/17 02:16,13/Oct/17 16:48,20/Jun/19 08:22,,2.5,,Streams/Writers,,,0,"Problem Description:
        Recently a problem appeared in the use of commons io 2.5 when Tailer class is in the process of monitoring and reading log files: there is lost logs and repeatedly collected logs for the collection of log files continuously split by time .
Scene reproduction:
      We use log4j-1.2.17 in our project to generate the log file and split it up once every hour. If the current file name is system.log, the file name after splitting is system1.log.The Tailer class in commons io 2.5 monitors changes to the file every 500 milliseconds.
     1. The current system.log length is 10, position is also 10, after cutting the new system.log length is 20, then this.length is greater than position and position is set to 0, the old file collection then repeats (ie, system1. Log). New log is missing.
     2. The current system.log length is 10,position is 10, after cutting new system.log length is 10, then this.length is equal to position, no log information is read. New file logs is missing.
    I hope commons io team can solve this problem, thank you!",,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,Important,,,,,,,,9223372036854775807,,,2017-01-05 02:16:22.0,,,,,,0|i38a9r:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,
ValidatingObjectInputStream does not handle arrays of primitive types,IO-525,13031463,Bug,Open,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Major,,,Starous,Starous,02/Jan/17 09:37,02/Jan/17 09:37,20/Jun/19 08:22,,2.5,,,,,0,"ValidatingObjectInputStream does not handle arrays and primitive types correctly. 

The current behaviour expects a classname, but for example for byte arrays it fails on unknown class with name [B

I would expect some possibility of whitelisting of primitive types and/or arrays",,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,9223372036854775807,,,2017-01-02 09:37:14.0,,,,,,0|i3863j:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,
Maven-Bundle-Plugin imports version 2.4 as 1.4,IO-350,12613100,Bug,Open,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Major,,,adrian2k7,adrian2k7,23/Oct/12 07:25,27/Nov/16 09:43,20/Jun/19 08:22,,2.4,2.5,,,,1,"In 2.4 you added 
{code}
 <commons.osgi.export>
        <!-- Explicit list of packages from IO 1.4 -->
        org.apache.commons.io;
        org.apache.commons.io.comparator;
        org.apache.commons.io.filefilter;
        org.apache.commons.io.input;
        org.apache.commons.io.output;version=1.4.9999;-noimport:=true,
        <!-- Same list plus * for new packages -->
        org.apache.commons.io;
        org.apache.commons.io.comparator;
        org.apache.commons.io.filefilter;
        org.apache.commons.io.input;
        org.apache.commons.io.output;
        org.apache.commons.io.*;version=${project.version};-noimport:=true
    </commons.osgi.export>
{code}

This creates an entry in the MANIFEST.MF like
{code}
Import-Package: org.apache.commons.io;version=""[1.4,2)""
{code}

Which leads to our bundles not working with 2.4, as we are exporting 2.4 and not 1.4 in our application.

I think the solution is, that if somebody want's to use it as 1.4 he should export the packages as 1.4 by themselves.

I added an example project.",,,,,,,,,,,23/Oct/12 07:27;adrian2k7;commons-io-osgi-bug.zip;https://issues.apache.org/jira/secure/attachment/12550418/commons-io-osgi-bug.zip,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,250502,,,2012-10-23 07:25:47.0,,,,,,0|i0ayyn:,61937,,,,,,,,,,,,,,,,,,,,,
FileUtils.sizeOfDirectory(File) throws IllegalArgumentException on symlink that does not exist,IO-449,12724028,Bug,Open,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Major,,,schristou88,schristou88,27/Jun/14 01:08,28/Oct/15 09:48,20/Jun/19 08:22,,2.5,,Utilities,,,1,FileUtils.isSymlink(File) will throw an IllegalArgumentException if the symbolic link does not exist. FileUtils.sizeOfDirectory(File) ignores any exceptions that are from the symbolic link. I added another catch to ignore IllegalArgumentException.,,,,,,,,,,,27/Jun/14 01:13;schristou88;IO-449.diff;https://issues.apache.org/jira/secure/attachment/12652728/IO-449.diff,1.0,,,,,,,,,,,,,,,,,,,2014-06-30 22:18:14.853,,,false,,,,,,,,,,,,,402213,,,Wed Oct 28 09:48:40 UTC 2015,,,,,,0|i1x8a7:,402277,,,,,,,,,27/Jun/14 01:13;schristou88;I have created a patch for this issue.,30/Jun/14 22:18;kinow;Patch looks good and doesn't break any existing tests cases.,21/Aug/15 14:31;risenberg;When shall this fix appear in a release?,"28/Oct/15 09:13;almson;I'm not sure the explanation and comment is correct. This isn't about symlinks, and I don't think `isSymlink` throws IllegalArgumentException.

This fixes a race condition when the directory is being modified as its size is being calculated.

This also underlines a problem with FileUtils.sizeOf(File). It shouldn't throw `IllegalArgumentException`, it should throw a checked `IOException` when the file isn't found because the caller can't prevent the exception and he should be reminded to check for it.","28/Oct/15 09:48;risenberg;There is a problem with symlinks, though it is not correctly described - isSymlink() returns false for broken symlinks and then an IllegalArgumentException is thrown by sizeOf.",,,,,,,,
IOUtils.writeLines is not correct with a charset with BOM,IO-414,12683335,Bug,Open,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Major,,,florent.brosse,florent.brosse,08/Dec/13 16:36,08/Dec/13 16:43,20/Jun/19 08:22,,2.4,2.5,Streams/Writers,Utilities,,0,"When a charset has a BOM (like UTF-16), the method IOUtils.writeLines put 2 BOM on each line.

",,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,362587,,,Sun Dec 08 16:40:24 UTC 2013,,,,,,0|i1qi1b:,362881,,,,,,,,,"08/Dec/13 16:40;florent.brosse;I suggest that code to correct that bug:

    public static void writeLines(final Collection<?> lines, String lineEnding, final OutputStream output, final Charset encoding)
            throws IOException {
        if (lines == null) {
            return;
        }
        if (lineEnding == null) {
            lineEnding = LINE_SEPARATOR;
        }
        final Charset cs = Charsets.toCharset(encoding);
        StringBuilder stringBuilder = new StringBuilder();
        for (final Object line : lines) {
            if (line != null) {
            	stringBuilder.append(line.toString());
            }
            stringBuilder.append(lineEnding);
        }
        output.write(stringBuilder.toString().getBytes(cs));
    }

 public static void writeLines(final Collection<?> lines, String lineEnding,
            final Writer writer) throws IOException {
        if (lines == null) {
            return;
        }
        if (lineEnding == null) {
            lineEnding = LINE_SEPARATOR;
        }
        StringBuilder stringBuilder = new StringBuilder();
        for (final Object line : lines) {
            if (line != null) {
            	stringBuilder.append(line.toString());
            }
            stringBuilder.append(lineEnding);
        }
        writer.write(stringBuilder.toString());
    }
",,,,,,,,,,,,
copyDirectory (all overloads) does not maintain file permissions,IO-575,13146042,Bug,Open,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Minor,,,adamkewley,adamkewley,18/Mar/18 12:33,19/Mar/18 11:22,20/Jun/19 08:22,,2.5,,,,,0,"I found that permissions (specifically, execute) are not maintained when using copyDirectory. The following test demonstrates the behavior:**

 
{code:java}
Path sourceDir = Files.createTempDirectory(""source-dir"");
String filename = ""some-file"";
Path sourceFile = Files.createFile(sourceDir.resolve(filename));

assertThat(sourceFile.toFile().canExecute()).isFalse();

sourceFile.toFile().setExecutable(true);

assertThat(sourceFile.toFile().canExecute()).isTrue();

Path destDir = Files.createTempDirectory(""some-empty-destination"");

FileUtils.copyDirectory(sourceDir.toFile(), destDir.toFile());

Path destFile = destDir.resolve(filename);

assertThat(destFile.toFile().exists()).isTrue();
assertThat(destFile.toFile().canExecute()).isTrue(); // fails
{code}
Is it working as intended that the permissions are not copied over?

 

 

 ",,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-03-18 19:50:59.638,,,false,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 19 11:22:02 UTC 2018,,,,,,0|i3rgjz:,9223372036854775807,,,,,,,,,"18/Mar/18 19:50;sebb;I don't think the code makes any guarantees that permissions will be maintained.
As such, the code is behaving as designed. Though it could be better documented.

This might be worth implementing as an optional feature.
I don't think it should be the default, as that would change long-standing behaviour which people may be relying on.","19/Mar/18 11:22;adamkewley;Ok, thanks for clarifying - I thought as much, but wanted to bring it to the dev's attention.

I need the feature in my software because it executes arbitrary files at runtime so, in my case, I implemented a `FileVisitor`, almost exactly as Oracle's example:

[https://docs.oracle.com/javase/7/docs/api/java/nio/file/FileVisitor.html]

(again, just in case other devs need it)",,,,,,,,,,,
FilenameUtils.getFullPath incorrectly parses file names that begin with a tilde,IO-545,13086967,Bug,Open,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Minor,,,tfjpg,tfjpg,13/Jul/17 18:12,02/Aug/17 17:16,20/Jun/19 08:22,,2.4,2.5,Utilities,,,0,"For any file with a name that begins with a tilde, which is a valid file name in BSD and Windows, if you call FilenameUtils.getFullPath and pass the file name, it returns the file name followed by a path separator. It should return an empty string. It seems to be parsing it as a unix user directory because it starts with the tilde.","OpenJDK Runtime Environment (build 1.8.0_92-b14)
FreeBSD 10.0-RELEASE-p11
",,,,,,,,,MNG-6267,,0.0,,,,,,,,,,,,,,,,,,,2017-07-15 21:57:45.593,,,false,,,,,,,,,,,,,9223372036854775807,,,Mon Jul 17 13:41:50 UTC 2017,,,,,,0|i3hhrr:,9223372036854775807,,,,,,,,,15/Jul/17 21:57;michael-o;Why are you still on 10.0? It is out of support. Can you create an sample code for me? I can try on 10.3 and 11.0. I highly doubt the issue because there is no tilde expansion here.,"17/Jul/17 13:41;tfjpg;The OS is irrelevant because getFullPath just does parsing, it doesn't hit the file system. To be totally sure, I tested on Ubuntu 16.04.2 and got the same result. 

FilenameUtils.getFullPath(""~tildefilename.txt"") returns:
 ~tildefilename.txt/

It should return an empty string.

I went through the code for getFullPath and see where the issue is. It eventually calls getPrefixLength which has this block:
{code:java}
if (ch0 == '~') {
    int posUnix = filename.indexOf(UNIX_SEPARATOR, 1);
    int posWin = filename.indexOf(WINDOWS_SEPARATOR, 1);
    if (posUnix == -1 && posWin == -1) {
        return len + 1;  // return a length greater than the input
    }
    posUnix = posUnix == -1 ? posWin : posUnix;
    posWin = posWin == -1 ? posUnix : posWin;
    return Math.min(posUnix, posWin) + 1;
}
{code}

So if you pass getFullPath just a file name, with no path part, and that file name starts with a '~', the if (posUnix == -1 && posWin == -1) condition will be true. It is interpreting it as a ""named user"". It's actually in the javadoc for the method:
 * ~user/a/b/c.txt     --> ""~user/""    --> named user
 * ~user               --> ""~user/""    --> named user (slash added)

However, since you can have a file named something like ""~tildefilename.txt"", this is a problem. Either the method needs to be altered to account for this (although I am not sure it is possible to figure out if it is a file or a named user without hitting the file system), or at the very least the javadoc needs to be updated to note that the method will fail in these cases.",,,,,,,,,,,
