Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Component/s,Due Date,Votes,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Attachment,Attachment,Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Date of First Response),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Flags),Custom field (Flags),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Machine Readable Info),Custom field (New-TLP-TLPName),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Severity),Custom field (Severity),Custom field (Source Control Link),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Test and Documentation Plan),Custom field (Testcase included),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
FilenameUtils.concat fails if second argument (fullFilenameToAdd) starts with '~' (tilde),IO-552,13107180,Bug,Open,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Critical,,,jtuemmer,jtuemmer,05/Oct/17 09:20,12/Oct/17 07:51,20/Jun/19 08:24,,2.2,2.5,,,,,,Utilities,,0,"{{FilenameUtils.concat(""c:/temp"", ""~abc.txt"") returns ""~abc.txt/"" instead of ""c:/temp/~abc.txt"".}}

As a result, the file would be created in the user's home directory instead of c:/temp.

(Note: I Had to replace all instances of double backslashes that would normally appear in the java code with forward slashes as the editor cannot handle backslashes properly.)

commons io 2.2. and 2.5 behave the same. 2.3 and 2.4 not tested.","Windows 7 64bit, JavaVM 1.8 32bit",,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-10-12 07:22:23.029,,,false,,,,,,,,,,,,,,9223372036854775807,,,Thu Oct 12 07:51:34 UTC 2017,,,,,,0|i3kwof:,9223372036854775807,,,,,,,,,"12/Oct/17 07:22;kinow;FWIW, checked out the latest code, quickly tried the provided sample code, and successfully reproduced the issue.","12/Oct/17 07:51;kinow;Interesting. I didn't know, but looks like in Linux ~kinow is equivalent to /home/kinow, or to ~ if kinow is the currently logged-in user. My user is kinow, and trying `mkdir ~kinow` fails with directory already exists. But a random `mkdir ~jj` works. But so does `touch ~123`. Which means you can have a file or directory that starts with ~.

The [getPrefixLength() method|https://github.com/apache/commons-io/blob/43720d02405e0b96939b331c1be7812fe5fec877/src/main/java/org/apache/commons/io/FilenameUtils.java#L651] seems to assume that a file like ~kinow is going to be a directory. Thus moving the prefix to the last character + 1. 

When that happens, the [doNormalize()|https://github.com/apache/commons-io/blob/43720d02405e0b96939b331c1be7812fe5fec877/src/main/java/org/apache/commons/io/FilenameUtils.java#L348] simply appends the / to the end of the file name.

Altering the getPrefixLength() method to return 0 instead of the length+1 for the case in question, results in ""c:/temp/~abc.txt"", which I believe is the intended output.

However, this change also breaks 7 tests.

{noformat}
Results :

Failed tests: 
  FilenameUtilsTestCase.testConcat:474 expected:<[~user/]> but was:<[a/b/~user]>
  FilenameUtilsTestCase.testGetFullPath:744 expected:<[~user/]> but was:<[]>
  FilenameUtilsTestCase.testGetFullPathNoEndSeparator:779 expected:<[~user]> but was:<[]>
  FilenameUtilsTestCase.testGetPrefix:603 expected:<[~user/]> but was:<[]>
  FilenameUtilsTestCase.testGetPrefixLength:535 expected:<6> but was:<0>
  FilenameUtilsTestCase.testNormalize:192 expected:<~user[/]> but was:<~user[]>
  FilenameUtilsTestCase.testNormalizeNoEndSeparator:368 expected:<~user[/]> but was:<~user[]>

Tests run: 1318, Failures: 7, Errors: 0, Skipped: 4
{noformat}

Not sure how to fix it now. Might need to think about it some more. But would be easier if someone else chimed in to add a second opinion or alternatives. At work I am using FilenameUtils for parsing some file names in RESTful URL's. So might get some extra time to work on it if it impact us.

",,,,,,,,
FileUtils.isSymlinks misses symlink folders on Windows,IO-295,12536566,Bug,Reopened,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Major,,,ripper234,ripper234,29/Dec/11 10:50,10/Apr/14 08:57,20/Jun/19 08:24,,2.1,,,,,,,,,0,"I created a symlink folder via mklink.
Then, while debugging, I noticed that FileUtils.isSymlink() returns false on this directory, while Java 7's Files.isSymbolicLink() returns true.","Windows 7 64 bit, Oracle Java 7",,,,,,,,,18/Mar/12 21:14;detinho;IO-295-1.patch;https://issues.apache.org/jira/secure/attachment/12518853/IO-295-1.patch,17/Mar/12 21:35;detinho;IO-295.patch;https://issues.apache.org/jira/secure/attachment/12518809/IO-295.patch,2.0,,,,,,,,,,,,,,,,,,,2012-03-14 03:01:40.794,,,false,,,,,,,,,,,,,,222249,,,Thu Apr 10 08:57:36 UTC 2014,,,,,,0|i0slpr:,164995,,,,,,,,,"14/Mar/12 03:01;sebb;At present, the method always returns false for Windows systems.
Not sure whether it's possible to detect symbolic links on Windows (except by using Java 7 of course).","17/Mar/12 21:35;detinho;I thought a, in my opinion, workaround implementation: on windows, execute a dir command on the symlink and check if it contains <SYMLINK> or <SYMLINKD> (for files and directories).
I attached a prototype patch. If the idea get accepted, I'll work to improve the patch (maybe use commons exec?).","18/Mar/12 14:28;sebb;It's far from ideal using a command shell for this, but if it is the only way it might be worth it.

The class FileSystemUtils currently uses the same approach for getting the system free space, so if it is necessary to use a shell, we can re-use the process code from that class.","18/Mar/12 21:14;detinho;A new patch.
Moved the shell execution code to a new package protected class ExecUtils.","17/Apr/13 02:10;sebb;Looks like DIR does not list symlinks without adding either * or ? to the end of the path.
This means that the DIR command may return details for other symbolic links that happen to match the wildard expression.
The suggested patch would need enhancing to prevent false matches.",21/Apr/13 04:42;bayard;How about an (if JAVA_7) return isSymbolicLink at the top of our method?,22/Apr/13 17:39;sebb;There's little point fixing this now; Java 7 users can just use java.nio.file.Files.isSymbolicLink(Path path) which works for all OSes,"03/Apr/14 19:57;werickson;I disagree.

Apache Commons code also calls this flawed implementation instead of calling java.nio.file.Files.isSymbolicLink.

Here's an example:
http://grepcode.com/file/repo1.maven.org/maven2/commons-io/commons-io/2.4/org/apache/commons/io/FileUtils.java/#1529

In this particular case calling deleteDirectory() in windows will give vastly different results than it does in Linux/Unix

If you're going to tell people to stop using this implementation, you should also follow your own advice, and stop using it internally too.","03/Apr/14 21:50;sguillory6;Guys,
     This is not a Windows only issue. This bit us today in our CI build on an Ubuntu build node. In migrating our build nodes, we moved to a raid disk array, and starting using symbolic links to keep our build configs the same, and a number of unit tests starting failing due to FileUtils.isSymbolicLink() falsely reporting that leaf file was a symbolic link.
     I agree with Will Erickson. The Commons IO FileUtils.deleteDirectory() is calling the defective method and should be fixed.",10/Apr/14 08:57;bayard;Reopening per the comments.
FilenameUtils#normalizeNoEndSeparator returns null for UNC prefix without trailing backslash,IO-475,12819096,Bug,Open,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Minor,,,shoof,shoof,07/Apr/15 22:06,07/Apr/15 23:04,20/Jun/19 08:23,,1.4,2.0,2.0.1,2.1,2.2,2.3,2.4,,,0,"FilenameUtils#normalizeNoEndSeparator returns null for UNC prefix without trailing backslash.

The observed behavior is that normalizeNoEndSeparator returns a non-null value for the following unc-path-prefix:
\\{serverName-or-IP}\

{backSlash}{backSlash}{serverName-or-IP}{backSlash} 
but returns null for the following unc-path-prefix:
\\{serverName-or-IP}

{backSlash}{backSlash}{serverName-or-IP}

The markdown seems to eat my backslashes prepended to the serverName-or-IP.

There is nothing in the Microsoft API documentation which would suggest that the second unc-path-prefix would be invalid.

Therefore the expectation is that they should be treated as equivalent by FilenameUtils#normalizeNoEndSeparator.

The handling of unc-path-prefix is inconsistent with how FilenameUtils#normalizeNoEndSeparator handles drive relative and drive absolute path prefixes, where each notation is accepted and returns a non-null --> ( C: and C:\ ).",,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,Important,Patch,,,,,,,,9223372036854775807,,,2015-04-07 22:06:00.0,,,,,,0|i2cxq7:,9223372036854775807,,,,,,,,,,,,,,,,,,
