Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Fix Version/s,Component/s,Due Date,Votes,Labels,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Problem/Incident),Attachment,Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Date of First Response),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Machine Readable Info),Custom field (New-TLP-TLPName),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Severity),Custom field (Severity),Custom field (Source Control Link),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Test and Documentation Plan),Custom field (Testcase included),Comment,Comment,Comment,Comment
FileUtils.copyToFile backward incompatibility bug,IO-609,13239834,Bug,Open,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Major,,,lingchao,lingchao,16/Jun/19 22:06,16/Jun/19 22:06,20/Jun/19 08:20,,2.6,,,,0,,"Hi,

The following code snippets throw an IOException: Stream closed. It works well before commons-io 2.6. When I update commons-io to 2.6, it failed. There is a backward incompatibility bug behind it.

The function code:

{code:java}
public class Demo {
	  private void backupFile(String srcPath, String entryPath, ZipOutputStream stream) throws IOException {
		    ZipEntry zipEntry = new ZipEntry(entryPath);
		    stream.putNextEntry(zipEntry);
		    Files.copy(Paths.get(srcPath), stream);
		  }
	  private void backupDir(String srcDir, String dstDir, ZipOutputStream stream) throws IOException {
		    File dir = new File(srcDir);
		    for (String path : dir.list()) {
		      System.out.println(path);
		      backupFile(dir.getAbsolutePath() + File.separator + path, dstDir + File.separator + path, stream);
		    }
		  }
	  public void backup(String name) throws IOException {
		      Files.createDirectories(Paths.get(""/Users/chenlingchao/eclipse_projects/workspace/BBI.BugDetection""));
		      ZipOutputStream stream = new ZipOutputStream(
		          Files.newOutputStream(Paths.get(""/Users/chenlingchao/eclipse_projects/workspace/BBI.BugDetection/tmp"" + File.separator + name)));
		      try {
		        backupDir(""/Users/chenlingchao/eclipse_projects/workspace/BBI.BugDetection/tmp"", ""meta"" + File.separator + ""tables"", stream);
		        stream.closeEntry();
		      } finally {
		        stream.close();
		      }
		    }
	  
	  public void restore(String name) throws IOException {
		      ZipInputStream stream = new ZipInputStream(
		          Files.newInputStream(Paths.get(""/Users/chenlingchao/eclipse_projects/workspace/BBI.BugDetection/tmp"" + File.separator + name)));
		      try {
		        ZipEntry entry;
		        while ((entry = stream.getNextEntry()) != null) {
		          FileUtils.copyToFile(stream, new File(""/Users/chenlingchao/eclipse_projects/workspace/BBI.BugDetection/tmp"" + File.separator + entry.getName()));
		        }
		      } finally {
		        stream.close();
		      }
		  }
}
{code}

The test code:

{code:java}
	@Test
	public void TestDemo() throws IOException{
    Demo test = new Demo();
    test.backup(""test.zip"");
    test.restore(""test.zip"");
	}
	
{code}

",,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,9223372036854775807,,,2019-06-16 22:06:44.0,,,,,,0|z03sv4:,9223372036854775807,,,,,,,,,,,,
FilenameUtils.concat fails with relative path,IO-606,13231991,Bug,Open,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Major,,,matthias-ronge,matthias-ronge,07/May/19 11:50,07/May/19 13:27,20/Jun/19 08:21,,2.6,,Utilities,,0,,"{{FilenameUtils.concat(""../../../../src/test/resources/"", ""filename.xml"")}}

returns {{null}}, where expected result should be like

{{../../../../src/test/resources/filename.xml}}",,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-05-07 13:27:10.755,,,false,,,,,,,,,,,,9223372036854775807,,,Tue May 07 13:27:10 UTC 2019,,,,,,0|z02gls:,9223372036854775807,,,,,,,,,"07/May/19 13:27;ggregory;[~matthias-ronge],

Thank you for your report.

Please feel free to provide a failing unit test as a PR on GitHub and a fix if you are available.

Gary",,,
"getPrefixLength returns wrong length on linux for filename ""C:""",IO-600,13215010,Bug,Open,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Major,,,ichbinkeinreh,ichbinkeinreh,11/Feb/19 14:35,11/Feb/19 14:35,20/Jun/19 08:21,,2.6,,,,0,,"On most unix filesystems only null byte and / are reserved characters. So its perfectly valid to have a file called ""C:"".

If the getPrefixLength method is called for the path of such a file then it returns 2 whereas the expected value is 0.",,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,9223372036854775807,,,2019-02-11 14:35:34.0,,,,,,0|yi0uw8:,9223372036854775807,,,,,,,,,,,,
FileUtils.copyFile fails with java.io.IOException: No such device,IO-586,13189394,Bug,Open,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Major,,,loonydevil,loonydevil,04/Oct/18 10:31,04/Oct/18 10:31,20/Jun/19 08:21,,2.6,,Utilities,,0,,"When trying to copy file on CEPH filesystem, FileUtils.copyFile fails with exception. I don't see any workaround except of replacing that call and rebuilding the project.

*Test Case*:

Here's a simple class to reproduce the issue:

 

 
{code:java}
import org.apache.commons.io.FileUtils;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;

public class Test3 {
    public static void main(String[] args) throws IOException {
        PrintWriter writer = new PrintWriter(""file.txt"", ""UTF-8"");
        writer.println(""test input "" + Math.random());
        writer.close();
        FileUtils.copyFile(new File(""file.txt""), new File(""file-copy.txt""));
    }
}
{code}
below is the stacktrace:
{code:java}
Exception in thread ""main"" java.io.IOException: No such device at sun.nio.ch.FileChannelImpl.map0(Native Method) at sun.nio.ch.FileChannelImpl.map(FileChannelImpl.java:926) at sun.nio.ch.FileChannelImpl.transferFromFileChannel(FileChannelImpl.java:634) at sun.nio.ch.FileChannelImpl.transferFrom(FileChannelImpl.java:708) at org.apache.commons.io.FileUtils.doCopyFile(FileUtils.java:1131) at org.apache.commons.io.FileUtils.copyFile(FileUtils.java:1076) at org.apache.commons.io.FileUtils.copyFile(FileUtils.java:1028) at ztst.Test3.main(Test3.java:17)
{code}
Here's our server's file system configuration:
{code:java}
1. a squashfs (read only) image stored on a ceph's rbd
2. a directory on cephfs (read/write)

1 is the lower layer and 2 is the upper layer of an unionfs mount with the following options:

cow
max_files=32768
allow_other
use_ino
direct_io
statfs_omit_ro
nonempty
{code}
 ",,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,9223372036854775807,,,2018-10-04 10:31:15.0,,,,,,0|i3ytpr:,9223372036854775807,,,,,,,,,,,,
FilenameUtils.isExtension() is case-sensitive,IO-579,13164946,Bug,Open,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Major,,,ohadr,ohadr,08/Jun/18 14:38,08/Jun/18 17:44,20/Jun/19 08:21,,2.6,,Utilities,,0,easyfix,"FilenameUtils.isExtension() is case-sensitive. 

All 3 implementations of this method call String.equals() rather than equalsIgnoreCase(), so it means that if my extension is ""jpg"", for example, and my filename is something.JPG, the method (any of them) will return 'false'.

 

fix suggestion: should use the method [FilenameUtils.eqauls(...)|https://github.com/apache/commons-io/blob/master/src/main/java/org/apache/commons/io/FilenameUtils.java#L1200]

 ",,86400,86400,,0%,86400,86400,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-06-08 15:06:24.883,,,false,,,,,,,,,,,,9223372036854775807,,,Fri Jun 08 17:44:21 UTC 2018,,,,,,0|i3unwv:,9223372036854775807,,,,,,,,,"08/Jun/18 15:06;ggregory;Hello [~ohadr],

Case-sensitivity for file names depends on the file system. The Javadoc for this method specifies ""The extension check is case-sensitive on all platforms."" There is nothing to fix in this API IMO.

 ","08/Jun/18 16:38;ohadr;thanks [~garydgregory] for your supoer-quick reply.

 

In my case, I have an extension (the param) ""jpg"". On the file-system (windows in my case), there is a file ""something.JPG"". Due to the way the method is implemented now, I have to pass 2 extensions - ""jpg"" and ""JPG"", not to mention all other permutations (jPg, JPg, etc). otherwise, the method isExtension() returns false, and it is wrong...

 

I think the right way is to allow (by a param) the caller to decide whether he wants to check case-sensitive or not.... and it should be very easy fix, because there is already the method FilenameUtils.equals()....

 

what do you think?","08/Jun/18 16:45;ggregory;We are attempting top abstract things like case-sensitivity in a new enum in trunk called {{org.apache.commons.io.FileSystem}} but it is not fully baked; any help is appreciated.

Basically, for now, I think you should write code like:

{code:java}
FilenameUtils.isExtension(myString.toLowerCase(Locale.ROOT), new String[] {""jpg"", ""gif"", ""andSoOn"" });
{code}

For now, I'd rather not add a case-sensitive boolean to a bunch of APIs. Ideally, we should have APIs in {{org.apache.commons.io.FileSystem}} that factor that in.","08/Jun/18 17:44;ohadr;is it possible then to add another ""isExtension"" method, that get an extra-parameter, which is IOCase, and the caller can decide if he wants to be case-sensitive or not? other methods will call that method with a default param which will be IOCase.SENSITIVE"
"Inconsistency between org.apache.commons.io.FileUtils.(moveFile(File, File) and moveDirectory(File, File)) methods",IO-573,13143711,Bug,Open,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Major,,,pranet,pranet,08/Mar/18 22:38,08/Mar/18 22:38,20/Jun/19 08:21,,2.6,,Utilities,,0,,"When the destination directory is on a different filesystem, the documentation says we need to copy and delete. In case the delete fails, org.apache.commons.io.FileUtils.moveFile(File, File) will attempt to delete the destination file too before throwing an error, but
org.apache.commons.io.FileUtils.moveDirectory(File, File) will directly throw an error without deleting the newly copied (created) destination directory. Is this intentional?",,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,9223372036854775807,,,2018-03-08 22:38:46.0,,,,,,0|i3r2lz:,9223372036854775807,,,,,,,,,,,,
FilenameUtils#directoryContains uses startWith-logic,IO-558,13121211,Bug,Open,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Major,,,atroxaper,atroxaper,28/Nov/17 07:42,28/Nov/17 07:45,20/Jun/19 08:21,,2.6,,Utilities,,0,,"org.apache.commons.io.FilenameUtils#directoryContains uses startWith-logic to find out result.
It is wrong for cases like directoryContains(""/a"", ""/aa"").

In patch:
# improve the method logic
# write tests for the method
# clean up the method's javaDoc",,,,,,,,,,,28/Nov/17 07:45;atroxaper;_IO_558__Improve_logic_of_FilenameUtils_directoryContains__The_method_s_logic_was_wrong_in.patch;https://issues.apache.org/jira/secure/attachment/12899565/_IO_558__Improve_logic_of_FilenameUtils_directoryContains__The_method_s_logic_was_wrong_in.patch,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,9223372036854775807,,,2017-11-28 07:42:44.0,,,,,,0|i3n9mf:,9223372036854775807,,,,,,,,,,,,
FilenameUtils#normalizeNoEndSeparator does not sanitize multiple backslashes directly after the colon in windows file paths,IO-585,13189156,Bug,Open,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Minor,,,adammcclenaghan,adammcclenaghan,03/Oct/18 13:02,03/Oct/18 13:19,20/Jun/19 08:21,,2.6,,,,0,,"FilenameUtils#normalizeNoEndSeparator states in the javadoc that :
 ""A double slash will be merged to a single slash (but UNC names are handled).""

It has been observed that if a double backslash occurs after the colon in a windows filepath, then the returned path still contains this double backslash. For example:
{code:java}
C:\\Program Files\\ExampleDirectory  -->  C:\\Program Files\ExampleDirectory {code}
While the expectation is that we should be returning ' C:\Program Files\ExampleDirectory '

 ",,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,9223372036854775807,,,Wed Oct 03 13:09:45 UTC 2018,,,,,,0|i3ys93:,9223372036854775807,,,,,,,,,"03/Oct/18 13:09;adammcclenaghan;Sample code to reproduce:
{code:java}
String path = ""C:\\\\Program Files\\\\TestDir;
String normalized = FilenameUtils.normalizeNoEndSeparator(path, false);{code}
Observe that the output is 
{code:java}
C:\\Program Files\TestDir{code}
 

The following is a code snippet from FilenameUtils#doNormalize
{code:java}
// adjoining slashes
for (int i = prefix + 1; i < size; i++) {
    if (array[i] == separator && array[i - 1] == separator) {
        System.arraycopy(array, i, array, i - 1, size - i);
        size--;
        i--;
    }
}
{code}
Using the 'path' string from the example above, the prefix is set to '3' by FilenameUtils#getPrefixLength, as a result of this, array[i] on first loop will be 'P', this explains why we are not merging the slashes. ",,,
Incorrect documentation for cloning repository,IO-569,13139573,Bug,Open,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Minor,,,mdernst,mdernst,20/Feb/18 05:46,20/Feb/18 05:46,20/Jun/19 08:21,,2.6,,,,0,,"https://commons.apache.org/proper/commons-io/source-repository.html
says:

> Anonymous Access
> 
> The source can be checked out anonymously from Git with this command:
> 
> git clone --branch commons-io-2.6 http://git-wip-us.apache.org/repos/asf/commons-io.git

However, when I run that command, I get:

% git clone --branch commons-io-2.6 http://git-wip-us.apache.org/repos/asf/commons-io.git
Cloning into 'commons-io'...
warning: redirecting to https://git1-us-west.apache.org/repos/asf/commons-io.git/
fatal: Remote branch commons-io-2.6 not found in upstream origin

The tags include these:

commons-io-2.5
commons-io-2.5-RC1
commons-io-2.5-RC2
commons-io-2.5-RC3
commons-io-2.5-RC4
commons-io-2.6-RC1
commons-io-2.6-RC2
commons-io-2.6-RC3

but there is no tag for commons-io-2.6.",,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,9223372036854775807,,,2018-02-20 05:46:28.0,,,,,,0|i3qd4v:,9223372036854775807,,,,,,,,,,,,
AutoCloseInputStream sometimes breaks mark/reset contract,IO-568,13136790,Bug,Open,IO,Commons IO,software,issues@commons.apache.org,Commons IO is a library of utilities to assist with developing IO functionality. ,http://commons.apache.org/io/,Minor,,,tmortagne,tmortagne,07/Feb/18 09:16,19/Feb/18 12:07,20/Jun/19 08:21,,2.6,2.7,Streams/Writers,,0,,"If the the inputstream support mark it should switch back from ClosedInputStream to initial InputStream and call reset on it.

To reproduce:

{code}
        AutoCloseInputStream stream = new AutoCloseInputStream(new ByteArrayInputStream(""toto"".getBytes()));

        stream.mark(""toto"".length());
        while (stream.read(new byte[1]) != -1);
        stream.reset();
{code}

Among other things it's causing TIKA-2395.",,,,,,,,,,TIKA-2395,,0.0,,,,,,,,,,,,,,,,,,,2018-02-08 11:46:55.533,,,false,,,,,,,,,,,,9223372036854775807,,,Thu Feb 08 11:47:40 UTC 2018,,,,,,0|i3pvyn:,9223372036854775807,,,,,,,,,07/Feb/18 09:32;tmortagne;I can work on a pull request but I would first like to know if you agree with the need to support mark/reset even when reading the whole stream.,"08/Feb/18 11:46;githubbot;GitHub user tmortagne opened a pull request:

    https://github.com/apache/commons-io/pull/55

    IO-568: AutoCloseInputStream crash on reset() when reading the whole stream

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tmortagne/commons-io IO-568

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-io/pull/55.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #55
    
----
commit 7c042b8d677ee3019de72e7e5c34c4d78d375ef9
Author: Thomas Mortagne <thomas.mortagne@...>
Date:   2018-02-07T10:04:53Z

    IO-568: AutoCloseInputStream crash on reset() when reading the whole stream

----
","08/Feb/18 11:47;tmortagne;Created https://github.com/apache/commons-io/pull/55, easier to understand what I have in mind :)",
