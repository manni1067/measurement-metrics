Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Component/s,Due Date,Votes,Labels,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Attachment,Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Date of First Response),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Flags),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Machine Readable Info),Custom field (New-TLP-TLPName),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Severity),Custom field (Severity),Custom field (Source Control Link),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Test and Documentation Plan),Custom field (Testcase included),Comment,Comment,Comment,Comment,Comment,Comment
functors.InvokerTransformer backward incompatibility bug,COLLECTIONS-721,13239832,Bug,Open,COLLECTIONS,Commons Collections,software,issues@commons.apache.org,,http://commons.apache.org/collections/,Major,,,lingchao,lingchao,16/Jun/19 21:48,16/Jun/19 21:48,20/Jun/19 08:27,,4.1,4.2,4.3,,,0,performance,"The following code snippets throw a NotSerializableException. It works well before commons-collections4 4.0 and commons-collection3. When I update it to 4.1 or newer versions, it failed.


{code:java}
	@Test
	public void Demo() throws IOException{
		InvokerTransformer transformer = new InvokerTransformer(""toString"", new Class[]{}, new Object[]{});
        Queue priorityQueue = new PriorityQueue(2, new TransformingComparator(transformer));
        priorityQueue.add(1);
        
        ByteArrayOutputStream bout = new ByteArrayOutputStream();
        ObjectOutputStream out = new ObjectOutputStream(bout);
        out.writeObject(priorityQueue);
		
		}
{code}
",,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,Important,,,,,,,,9223372036854775807,,,2019-06-16 21:48:17.0,,,,,,0|z03suo:,9223372036854775807,,,,,,,,,,,,,,
ObjectInputFilter REJECTED: class org.apache.commons.collections.functors.InstantiateFactory,COLLECTIONS-717,13234318,Bug,Open,COLLECTIONS,Commons Collections,software,issues@commons.apache.org,,http://commons.apache.org/collections/,Major,,,kirubakaran,kirubakaran,20/May/19 13:31,20/May/19 13:31,20/Jun/19 08:27,,4.1,,,Functor,,0,,"we have an object rejection issue with latest version of common collection for the class InstantiateFactory

we have set system property to enable unsafe serialization= true but still we have object rejection for org.apache.commons.collections.functors.InstantiateFactory.

can you please help us to resolve the issue.

Error log:

DOMAIN] > <BEA-000000> <ObjectInputFilter REJECTED: class org.apache.commons.collections.functors.InstantiateFactory, array length: -1, nRefs: 3, depth: 2, bytes: 229, ex: n/a>

####<May 8, 2019 1:08:43,859 PM EDT> <Error> <RJVM> <nygindapnp613.us.db.com> <MS1> <ExecuteThread: '2' for queue: 'weblogic.socket.Muxer'> <<WLS Kernel>> <> <a8f22bc1-d077-4f1b-be08-7677cfc592c6-00000005> <1557335323859> <[severity-value: 8] [rid: 0] [partition-id: 0] [partition-name: DOMAIN] > <BEA-000503> <Incoming message header or abbreviation processing failed.

 java.io.InvalidClassException: filter status: REJECTED

java.io.InvalidClassException: filter status: REJECTED

        at java.io.ObjectInputStream.filterCheck(ObjectInputStream.java:1255)

        at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1878)

        at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1751)

        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1560)

        at java.io.ObjectInputStream.readObject(ObjectInputStream.java:431)

        at weblogic.rjvm.ClassTableEntry.readExternal(ClassTableEntry.java:106)

        at java.io.ObjectInputStream.readExternalData(ObjectInputStream.java:2118)

        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2067)

        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573)

        at java.io.ObjectInputStream.readObject(ObjectInputStream.java:431)

        at weblogic.rjvm.InboundMsgAbbrev.readObject(InboundMsgAbbrev.java:73)

        at weblogic.rjvm.InboundMsgAbbrev.read(InboundMsgAbbrev.java:45)

        at weblogic.rjvm.MsgAbbrevJVMConnection.readMsgAbbrevs(MsgAbbrevJVMConnection.java:324)

        at weblogic.rjvm.MsgAbbrevInputStream.init(MsgAbbrevInputStream.java:219)

        at weblogic.rjvm.MsgAbbrevJVMConnection.dispatch(MsgAbbrevJVMConnection.java:556)

        at weblogic.rjvm.t3.MuxableSocketT3.dispatch(MuxableSocketT3.java:658)

        at weblogic.socket.BaseAbstractMuxableSocket.dispatch(BaseAbstractMuxableSocket.java:397)

        at weblogic.socket.SocketMuxer.readReadySocketOnce(SocketMuxer.java:981)

        at weblogic.socket.SocketMuxer.readReadySocket(SocketMuxer.java:917)

        at weblogic.socket.PosixSocketMuxer.processSockets(PosixSocketMuxer.java:171)

        at weblogic.socket.SocketReaderRequest.run(SocketReaderRequest.java:30)

        at weblogic.socket.SocketReaderRequest.execute(SocketReaderRequest.java:43)

        at weblogic.kernel.ExecuteThread.execute(ExecuteThread.java:147)

      at weblogic.kernel.ExecuteThread.run(ExecuteThread.java:119)",WebLogic 12.2.1.3 server,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,9223372036854775807,,,2019-05-20 13:31:17.0,,,,,,0|z02uxs:,9223372036854775807,,,,,,,,,,,,,,
More uniform safe-null methods in CollectionUtils,COLLECTIONS-604,13075163,Bug,Open,COLLECTIONS,Commons Collections,software,issues@commons.apache.org,,http://commons.apache.org/collections/,Minor,,kinow,kinow,kinow,26/May/17 12:41,29/Jun/17 00:44,20/Jun/19 08:27,,4.1,,,Collection,,1,,"Currently, there are 65 public methods in `CollectionUtils`. And 53 without the deprecated ones. Out of these, 24 handle `null` arguments. The remaining methods throw a `NullPointerException` (NPE) at some part of its code.

The methods that handle nulls, throw NPE, or return empty columns, boolean values, or just doesn't do anything.

As a user of the API, I would expect a more uniform behaviour across the methods of `CollectionUtils`. COLLECTIONS-600 address one of these methods.

`removeAll` (2x) and `retainAll` (2x) both state that a NPE will be thrown if either parameter is `null`. However, they never check if the values are null, and instead allow the code to run until a NPE is thrown.

And the following code shows that `isEmpty` and `isFull` behave differently too.

{code:java}
Collection<String> c = null;
System.out.println(CollectionUtils.isEmpty(c)); // return true
System.out.println(CollectionUtils.isFull(c));  // throws a NPE
{code}

If I don't have to worry about `null`s with `#isEmpty`, I would expect the same from its related-method `#isFull`.

What would be a good approach for it? Define a behaviour to all methods? Or leave as is, but add more documentation?

There are a few methods that can easily be updated to check for `null` values. Others would require a bit more thinking. An example if the method in question for COLLECTIONS-600. It checks equality of collections, and when both collections are `null`, it says that they are equals. Google Guava [Iterables#elementsEqual|https://github.com/google/guava/blob/312aeb938bd35b5b7c8930e19ff5d1ca38e49424/guava/src/com/google/common/collect/Iterables.java#L232] and [Iterators#elementsEqual|https://github.com/google/guava/blob/312aeb938bd35b5b7c8930e19ff5d1ca38e49424/guava/src/com/google/common/collect/Iterators.java#L274] do not check for null values, for what it is worth.",,,,,,,,,,26/May/17 12:51;kinow;COLLECTIONS-604.csv;https://issues.apache.org/jira/secure/attachment/12870066/COLLECTIONS-604.csv,1.0,,,,,,,,,,,,,,,,,,,2017-05-28 14:00:17.185,,,false,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 29 00:44:07 UTC 2017,,,,,,0|i3fipr:,9223372036854775807,,,,,,,,,26/May/17 12:51;kinow;CSV file used for this issue.,"28/May/17 14:00;jholtkamp;A good comparison for {{null}}-behaviour would be a look to {{StringUtils}} et. al. in my mind, because 
a) {{StringUtils}} handles {{null}} values reasonably and
b) that would align behaviours across the different Commons libraries","05/Jun/17 18:00;jholtkamp;As [~britter] writes on the Mailing List:
{quote}Nobody seems to have an opinion on this issue so you should start implementing your preference.{quote}
Should we design an approach together or what is your favourite way of implementing this here?","06/Jun/17 10:05;kinow;Hi [~jholtkamp],

>Should we design an approach together

+1

> or what is your favourite way of implementing this here?

I liked your arguments for an approach that follows the behaviour in `StringUtils`.

[~tn], any feedback on this? We might change some JavaDocs, and make it null-safe in some cases, without breaking binary compatibility, but still changing the behaviour. I was reading the last updates in the tickets, and I think we drove the design of many changes in 4.x. So if you have anything in mind I'd appreciate any feedback before we start changing the code. Later we may look at other classes to make this behaviour consistent across the whole [collections] component.

Cheers
Bruno ","28/Jun/17 10:05;jholtkamp;[~kinow] No feedback from his side, so I'd start implementing some example cases on the weekend.",29/Jun/17 00:44;kinow;Sounds like a good idea [~jholtkamp]!
Deletions/insertions get lost in the ReplacementsFinder if they're at the end of the compared sequences,COLLECTIONS-592,12980680,Bug,Open,COLLECTIONS,Commons Collections,software,issues@commons.apache.org,,http://commons.apache.org/collections/,Minor,,,Unda,Unda,19/Jun/16 22:19,20/Jun/16 07:31,20/Jun/19 08:27,,4.0,4.1,,,,0,,"In the {{sequence}} package, when comparing 2 lists with a {{SequencesComparator}} and visiting the {{EditScript}} with a {{ReplacementsFinder}}, pending deletions and insertions get lost in the {{ReplacementsFinder}} when they're at the end of the sequences.

The {{ReplacementsFinder}} stores the deletions and insertions until it encounters a {{KeepCommand}}, when it flushes the pending commands by triggering the {{handleReplacement}} method of its {{ReplacementHandler}}.

The problem is, when edit commands are at the end of the sequences, the {{ReplacementsFinder}} will never encounter a {{KeepCommand}} to flush them, so they're stuck here and will never be handed over the {{ReplacementHandler}}.

To fix this behavior in client code, one can manually call {{ReplacementsFinder.visitKeepCommand(null)}} after the {{EditScript.visit()}} call.

I patched this bug in the library by adding a {{CommandVisitor.endOfVisit}} method and calling it at the end of the {{EditScript.visit}} method, so it allows to flush the pending deletions/insertions in the {{ReplacementsFinder}} when the end of the {{EditScript}} is reached.",,,,,,,,,,19/Jun/16 22:20;Unda;ReplacementsFinder.patch;https://issues.apache.org/jira/secure/attachment/12811732/ReplacementsFinder.patch,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,Patch,,,,,,,,9223372036854775807,,,2016-06-19 22:19:09.0,,,,,,0|i2zpnr:,9223372036854775807,,,,,,,,,,,,,,
