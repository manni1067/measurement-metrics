Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Fix Version/s,Component/s,Due Date,Votes,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Attachment,Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Date of First Response),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Flags),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Machine Readable Info),Custom field (New-TLP-TLPName),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Severity),Custom field (Severity),Custom field (Source Control Link),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Test and Documentation Plan),Custom field (Testcase included),Comment,Comment,Comment,Comment,Comment
Deletions/insertions get lost in the ReplacementsFinder if they're at the end of the compared sequences,COLLECTIONS-592,12980680,Bug,Open,COLLECTIONS,Commons Collections,software,issues@commons.apache.org,,http://commons.apache.org/collections/,Minor,,,Unda,Unda,19/Jun/16 22:19,20/Jun/16 07:31,20/Jun/19 08:28,,4.0,4.1,,,,0,"In the {{sequence}} package, when comparing 2 lists with a {{SequencesComparator}} and visiting the {{EditScript}} with a {{ReplacementsFinder}}, pending deletions and insertions get lost in the {{ReplacementsFinder}} when they're at the end of the sequences.

The {{ReplacementsFinder}} stores the deletions and insertions until it encounters a {{KeepCommand}}, when it flushes the pending commands by triggering the {{handleReplacement}} method of its {{ReplacementHandler}}.

The problem is, when edit commands are at the end of the sequences, the {{ReplacementsFinder}} will never encounter a {{KeepCommand}} to flush them, so they're stuck here and will never be handed over the {{ReplacementHandler}}.

To fix this behavior in client code, one can manually call {{ReplacementsFinder.visitKeepCommand(null)}} after the {{EditScript.visit()}} call.

I patched this bug in the library by adding a {{CommandVisitor.endOfVisit}} method and calling it at the end of the {{EditScript.visit}} method, so it allows to flush the pending deletions/insertions in the {{ReplacementsFinder}} when the end of the {{EditScript}} is reached.",,,,,,,,,,19/Jun/16 22:20;Unda;ReplacementsFinder.patch;https://issues.apache.org/jira/secure/attachment/12811732/ReplacementsFinder.patch,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,Patch,,,,,,,,9223372036854775807,,,2016-06-19 22:19:09.0,,,,,,0|i2zpnr:,9223372036854775807,,,,,,,,,,,,,
AbstractIterableGetMapDecorator should be abstract,COLLECTIONS-518,12708186,Bug,Reopened,COLLECTIONS,Commons Collections,software,issues@commons.apache.org,,http://commons.apache.org/collections/,Minor,,,dipanjan21,dipanjan21,14/Apr/14 05:36,31/May/15 18:52,20/Jun/19 08:28,,4.0,,5.0,Map,,0,"AbstractIterableGetMapDecorator should be abstract, but is not",,,,,,,,,,14/Apr/14 05:37;dipanjan21;AbstractIterableGetMapDecorator.patch;https://issues.apache.org/jira/secure/attachment/12640027/AbstractIterableGetMapDecorator.patch,1.0,,,,,,,,,,,,,,,,,,,2014-05-06 21:01:43.958,,,false,,,,,,,,,,,,,386509,,,Sun May 31 18:52:05 UTC 2015,,,,,,0|i1ul0n:,386773,,,,,,,,,14/Apr/14 05:37;dipanjan21;Patch to make it abstract,"06/May/14 21:01;tn;This change will break binary compatibility.

Would be acceptable in this case imho, but needs to be clearly documented in the release notes.
","07/May/14 11:37;dipanjan21;@Binary Compatibility: True it would break it, but as you said, this should be acceptable 

So maybe you can commit it and keep the issue open till we document it in the release notes.","29/Oct/14 21:19;tn;Fixed in r1635305.

Added a todo entry to mention it in the release notes.","31/May/15 18:52;tn;Reverted the change in r1682770.

It is not really important and can be postponed to 5.0, as I want to avoid introducing a potential problem wrt binary compatibility."
